求两数之和=目标值 返回两数的位置
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for(int i = 0; i < nums.size(); i++) {
            for(int j = 1; j < nums.size(); j++) {
                if(nums[i] + nums[j] == target) {
                    if(i == j) {
                        break;
                    }
                    return{i, j};
                }
            }
        }
        return {};
    }
};
时间复杂度O(N^2) 有点太慢了:(
两次for循环找到是哪两个数=目标值，记录到i和j并返回，如果是同一个数记录两次就break
看了一下题解 可以用哈希表

检测回文数
class Solution {
public:
    bool isPalindrome(int x) {
        if(x < 0) {
            return false;
        }
        long value = x, temp = 0;
        while(x) {
            temp = x % 10 + 10* temp;
            x /= 10;
        }
        return value == temp;
    }
};
时间复杂度O(logN)
value记录原始x值，用temp记录x的倒叙，如歌value==temp返回true

罗马数字转十进制
class Solution {
    private:
    int charToValue(char ch) {
        switch (ch) {
            case 'I': return 1;
            case 'V': return 5;
            case 'X': return 10;
            case 'L': return 50;
            case 'C': return 100;
            case 'D': return 500;
            case 'M': return 1000;
            default: return 0;
        }
    }
public:
    int romanToInt(string s) {
        int sum = 0;
        for(int i = 0; i < s.size(); i++) {
            int value = charToValue(s[i]);
            if (i < s.size() - 1 && value < charToValue(s[i + 1])) {
                sum -= value;
            } else {
                sum += value;
            }
        }

        return sum;
    }
};
时间复杂度O(N)
判断罗马字母等于的数字大小，如果出现下一位数字比当前位数字大，则sum-value，如果到最后一位的话+=sum